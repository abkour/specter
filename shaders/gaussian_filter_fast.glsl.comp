#version 460 core
layout(local_size_x = 1024) in;

uniform int nPixels;

layout(std430, binding = 0) buffer gammaCompressedRGB 
{
    uint pixelsRGB[];
};

layout(std430, binding = 1) buffer grayscale
{
    uint pixelsGray[];
};

void main() {
    if(int(gl_GlobalInvocationID.x) > nPixels) return;

    int i = int(gl_GlobalInvocationID.x);
    
    vec3 inputColor = vec3( (pixelsRGB[i] & 0x000000FF) >> 0, 
                            (pixelsRGB[i] & 0x0000FF00) >> 8, 
                            (pixelsRGB[i] & 0x00FF0000) >> 16);
    
    vec3 normColor = inputColor * 0.00392156862;
    float luminance = 0.299 * normColor.r + 0.587 * normColor.g + 0.114 * normColor.b;

    uint grayPixel = uint(luminance * 255.f);

    uint r = grayPixel << 0;
    uint g = grayPixel << 8;
    uint b = grayPixel << 16;
    uint a = 255 << 24;

    pixelsGray[i] = r + g + b + a;
}